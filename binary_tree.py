# -*- coding: utf-8 -*-
"""Binary Tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DoGY5SSttodBACu0kHZtNQ6aqbdPvZ5p
"""

# binary_tree.py
# Implementasi Struktur Data Binary Search Tree (BST)

class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, value):
        if not self.root:
            self.root = Node(value)
            print(f"Inserted root node: {value}")
        else:
            self._insert_recursive(self.root, value)

    def _insert_recursive(self, current_node, value):
        if value < current_node.value:
            if current_node.left is None:
                current_node.left = Node(value)
                print(f"Inserted {value} to the left of {current_node.value}")
            else:
                self._insert_recursive(current_node.left, value)
        elif value > current_node.value:
            if current_node.right is None:
                current_node.right = Node(value)
                print(f"Inserted {value} to the right of {current_node.value}")
            else:
                self._insert_recursive(current_node.right, value)
        else:
            print(f"Value {value} already exists in the tree.")

    def inorder_traversal(self):
        print("In-order Traversal:", end=" ")
        self._inorder_recursive(self.root)
        print()

    def _inorder_recursive(self, current_node):
        if current_node:
            self._inorder_recursive(current_node.left)
            print(current_node.value, end=" ")
            self._inorder_recursive(current_node.right)

    def preorder_traversal(self):
        print("Pre-order Traversal:", end=" ")
        self._preorder_recursive(self.root)
        print()

    def _preorder_recursive(self, current_node):
        if current_node:
            print(current_node.value, end=" ")
            self._preorder_recursive(current_node.left)
            self._preorder_recursive(current_node.right)

    def postorder_traversal(self):
        print("Post-order Traversal:", end=" ")
        self._postorder_recursive(self.root)
        print()

    def _postorder_recursive(self, current_node):
        if current_node:
            self._postorder_recursive(current_node.left)
            self._postorder_recursive(current_node.right)
            print(current_node.value, end=" ")


# Contoh penggunaan Binary Tree
if __name__ == "__main__":
    tree = BinaryTree()

    # Tambahkan node ke tree
    tree.insert(50)
    tree.insert(30)
    tree.insert(70)
    tree.insert(20)
    tree.insert(40)
    tree.insert(60)
    tree.insert(80)

    # Lakukan traversal
    tree.inorder_traversal()
    tree.preorder_traversal()
    tree.postorder_traversal()